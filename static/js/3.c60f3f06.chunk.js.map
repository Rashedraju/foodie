{"version":3,"sources":["components/Form/SignupForm/SignupForm.module.scss","containers/Signup/Signup.module.scss","components/Form/SignupForm/SignupForm.js","containers/Signup/Signup.js"],"names":["module","exports","signupForm","props","formData","firstName","config","type","name","placeholder","label","lastName","email","password","initialValues","acceptedTerms","validationSchema","Yup","max","required","min","matches","oneOf","onSubmit","values","submit","formik","Form","handleSubmit","className","error","Alert","variant","style","marginBottom","errMsg","inputFields","Object","keys","forEach","key","item","Group","Control","styles","field","getFieldProps","Label","signupLabel","touched","errors","validation","push","formInput","Check","id","checkbox","custom","marginTop","Button","button","disabled","loading","Spinner","as","role","animation","size","connect","state","isAuthenticated","auth","authStatus","redirectPath","home","authRedirectPath","isLoading","msg","cartShow","cart","dispatch","onSignup","actions","onToggleCartUI","bool","history","useEffect","replace","signup","container","SignupForm","right"],"mappings":"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","file":"static/js/3.c60f3f06.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"signupLabel\":\"SignupForm_signupLabel__1a62W LoginForm_label__2MipJ\",\"field\":\"SignupForm_field__3beJm LoginForm_field__1dSQO\",\"validation\":\"SignupForm_validation__3Rmoc LoginForm_validation__11Jex\",\"checkbox\":\"SignupForm_checkbox__rKyqT\",\"button\":\"SignupForm_button__H_wNm\",\"btn\":\"SignupForm_btn__NW3N3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"signup\":\"Signup_signup__efX6l\",\"container\":\"Signup_container__3J4Z_\",\"right\":\"Signup_right__3Xi6b\"};","import { Formik } from 'formik';\r\nimport React from 'react';\r\nimport { Alert, Button, Form, Spinner } from 'react-bootstrap';\r\nimport * as Yup from 'yup';\r\nimport styles from './SignupForm.module.scss';\r\n\r\nconst signupForm = (props) => {\r\n    const formData = {\r\n        firstName: {\r\n            config: {\r\n                type: 'text',\r\n                name: 'firstName',\r\n                placeholder: 'First Name',\r\n            },\r\n            label: 'First Name',\r\n        },\r\n        lastName: {\r\n            config: {\r\n                type: 'text',\r\n                name: 'lastName',\r\n                placeholder: 'Last Name',\r\n            },\r\n            label: 'Last Name',\r\n        },\r\n        email: {\r\n            config: {\r\n                type: 'email',\r\n                name: 'email',\r\n                placeholder: 'Email Address',\r\n            },\r\n            label: 'Email Address',\r\n        },\r\n        password: {\r\n            config: {\r\n                type: 'password',\r\n                name: 'password',\r\n                placeholder: 'Password',\r\n            },\r\n            label: 'Password',\r\n        },\r\n    };\r\n\r\n    const formInput = (formik) => {\r\n        const inputFields = [];\r\n        Object.keys(formData).forEach((key) => {\r\n            const item = (\r\n                <Form.Group key={key}>\r\n                    <Form.Control\r\n                        {...formData[key].config}\r\n                        className={`${styles.field} w-md-75`}\r\n                        {...formik.getFieldProps(key)}\r\n                    />\r\n                    <Form.Label className={styles.signupLabel}> {formData[key].label} </Form.Label>\r\n\r\n                    {formik.touched[key] && formik.errors[key] ? (\r\n                        <small className={`${styles.validation} text-muted`}>\r\n                            <span className=\"text-danger\">* </span>\r\n                            {formik.errors[key]}\r\n                        </small>\r\n                    ) : (\r\n                        <span className=\"mb-3\">&nbsp;</span>\r\n                    )}\r\n                </Form.Group>\r\n            );\r\n            inputFields.push(item);\r\n        });\r\n        return inputFields;\r\n    };\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                firstName: '',\r\n                lastName: '',\r\n                email: '',\r\n                password: '',\r\n                acceptedTerms: false,\r\n            }}\r\n            validationSchema={Yup.object({\r\n                firstName: Yup.string()\r\n                    .max(25, 'Must be 25 characters or less.')\r\n                    .required('First Name required.'),\r\n                lastName: Yup.string()\r\n                    .max(25, 'Must be 25 characters or less.')\r\n                    .required('Last Name required.'),\r\n                email: Yup.string().email('Invalid email address!').required('Email required.'),\r\n                password: Yup.string()\r\n                    .min(8, 'Password is too short - should be 8 chars minimum.')\r\n                    .matches(/[a-zA-Z]/, 'Password can only contain Latin letters.')\r\n                    .required('Password required.'),\r\n                acceptedTerms: Yup.boolean()\r\n                    .required('You must accept the terms and conditions.')\r\n                    .oneOf([true], 'You must accept the terms and conditions.'),\r\n            })}\r\n            onSubmit={(values) => props.submit(values)}\r\n        >\r\n            {(formik) => (\r\n                <Form onSubmit={formik.handleSubmit}>\r\n                    <h1 className=\"text-primary mb-5\"> Sign Up</h1>\r\n\r\n                    {/** show error */}\r\n                    {props.error && (\r\n                        <Alert variant=\"danger\" style={{ marginBottom: '2rem' }}>\r\n                            {props.errMsg}\r\n                        </Alert>\r\n                    )}\r\n\r\n                    {/* render all form innput */}\r\n                    {formInput(formik)}\r\n\r\n                    <Form.Group>\r\n                        <Form.Check\r\n                            type=\"checkbox\"\r\n                            name=\"acceptedTerms\"\r\n                            id=\"customControlInline\"\r\n                            label=\"I've read and agree with Terms of Service and our Privacy Policy\"\r\n                            className={`${styles.checkbox} ml-1 mb-4 w-md-75`}\r\n                            {...formik.getFieldProps('acceptedTerms')}\r\n                            custom\r\n                        />\r\n\r\n                        {formik.touched.acceptedTerms && formik.errors.acceptedTerms ? (\r\n                            <small\r\n                                className={`${styles.validation} text-muted`}\r\n                                style={{ marginTop: '-.5rem' }}\r\n                            >\r\n                                <span className=\"text-danger\">* </span>\r\n                                {formik.errors.acceptedTerms}\r\n                            </small>\r\n                        ) : (\r\n                            <span>&nbsp;</span>\r\n                        )}\r\n                    </Form.Group>\r\n\r\n                    <Button\r\n                        type=\"submit\"\r\n                        variant=\"primary\"\r\n                        className={`shadow-none ${styles.button}`}\r\n                        disabled={props.disabled}\r\n                    >\r\n                        {props.loading ? (\r\n                            <Spinner as=\"span\" role=\"status\" animation=\"border\" size=\"sm\" />\r\n                        ) : (\r\n                            'Signup'\r\n                        )}\r\n                    </Button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default signupForm;\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport SignupForm from '../../components/Form/SignupForm/SignupForm';\r\nimport * as actions from '../../store/actions';\r\nimport styles from './Signup.module.scss';\r\n\r\nconst Signup = (props) => {\r\n    const {\r\n        isAuthenticated,\r\n        redirectPath,\r\n        error,\r\n        errMsg,\r\n        onSignup,\r\n        isLoading,\r\n        history,\r\n        onToggleCartUI,\r\n    } = props;\r\n\r\n    useEffect(() => {\r\n        onToggleCartUI();\r\n        if (isAuthenticated) history.replace(redirectPath);\r\n    }, [history, isAuthenticated, onToggleCartUI, redirectPath]);\r\n\r\n    return (\r\n        <div className={styles.signup}>\r\n            <div className={`${styles.container} row`}>\r\n                <div className=\"signup__left col-md-6\">\r\n                    <SignupForm\r\n                        submit={(values) => onSignup(values)}\r\n                        disabled={isLoading}\r\n                        loading={isLoading}\r\n                        error={error}\r\n                        errMsg={errMsg}\r\n                    />\r\n                </div>\r\n                <div className={`${styles.right} col-md-6`} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuthenticated: state.auth.authStatus.isAuthenticated,\r\n    redirectPath: state.home.authRedirectPath,\r\n    isLoading: state.auth.authStatus.loading,\r\n    error: state.auth.authStatus.error,\r\n    errMsg: state.auth.authStatus.msg,\r\n    cartShow: state.cart.cartShow,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    onSignup: (values) => dispatch(actions.signup(values)),\r\n    onToggleCartUI: (bool) => dispatch(actions.toggleCartUI(bool)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Signup);\r\n"],"sourceRoot":""}