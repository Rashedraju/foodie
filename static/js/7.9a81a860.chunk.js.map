{"version":3,"sources":["containers/Search/Search.js"],"names":["connect","state","searchQuery","search","query","foods","cartItems","cart","loading","loader","error","dispatch","onQueryChange","value","actions","onSearchFood","onToggleToCart","isAdded","item","props","searchResult","location","history","useEffect","urlParams","URLSearchParams","has","get","replace","length","toggleToCart","Array","fill","style","textAlign","center","queryChange"],"mappings":"kGAAA,6DA2DeA,uBAdS,SAACC,GAAD,MAAY,CAChCC,YAAaD,EAAME,OAAOC,MAC1BC,MAAOJ,EAAME,OAAOE,MACpBC,UAAWL,EAAMM,KAAKD,UACtBE,QAASP,EAAME,OAAOM,OACtBC,MAAOT,EAAME,OAAOO,UAGG,SAACC,GAAD,MAAe,CACtCC,cAAe,SAACC,GAAD,OAAWF,EAASG,IAAoBD,KACvDE,aAAc,SAACX,EAAOE,GAAR,OAAsBK,EAASG,IAAmBV,EAAOE,KACvEU,eAAgB,SAACC,EAASC,GAAV,OAAmBP,EAASG,IAAqBG,EAASC,QAG/DlB,EArDA,SAACmB,GAAW,IA0BnBC,EAxBAlB,EAUAiB,EAVAjB,YACAmB,EASAF,EATAE,SACAC,EAQAH,EARAG,QACAV,EAOAO,EAPAP,cACAG,EAMAI,EANAJ,aACAT,EAKAa,EALAb,UACAE,EAIAW,EAJAX,QACAH,EAGAc,EAHAd,MACAK,EAEAS,EAFAT,MACAM,EACAG,EADAH,eAoBJ,OAjBAO,qBAAU,WAEN,IAAMC,EAAY,IAAIC,gBAAgBJ,EAASlB,QAC/C,GAAIqB,EAAUE,IAAI,MAA+B,KAAvBF,EAAUG,IAAI,KAAa,CACjD,IAAMvB,EAAQoB,EAAUG,IAAI,KAC5Bf,EAAcR,QAEdkB,EAAQM,QAAQ,MAEpBb,EAAab,EAAaI,KAC3B,CAACA,EAAWgB,EAASD,EAASlB,OAAQS,EAAeG,EAAcb,IAGlEG,EAAMwB,OAAS,IAAGT,EAAe,kBAAC,IAAD,CAAOf,MAAOA,EAAOyB,aAAcd,KACpER,IAASY,EAAe,kBAAC,IAAD,CAAOf,MAAO,IAAI0B,MAAM,IAAIC,KAAK,OACzDtB,IAAOU,EAAe,uBAAGa,MAAO,CAAEC,UAAW,WAAvB,qBAGtB,oCACI,kBAAC,IAAD,CAAWC,QAAM,EAACC,YAAaxB,IAC9BQ","file":"static/js/7.9a81a860.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Foods from '../../components/Foods/Foods';\r\nimport SearchBar from '../../components/UI/SearchBar/SearchBar';\r\nimport * as actions from '../../store/actions';\r\n\r\nconst Search = (props) => {\r\n    const {\r\n        searchQuery,\r\n        location,\r\n        history,\r\n        onQueryChange,\r\n        onSearchFood,\r\n        cartItems,\r\n        loading,\r\n        foods,\r\n        error,\r\n        onToggleToCart,\r\n    } = props;\r\n\r\n    useEffect(() => {\r\n        // redirect if no search query\r\n        const urlParams = new URLSearchParams(location.search);\r\n        if (urlParams.has('q') && urlParams.get('q') !== '') {\r\n            const query = urlParams.get('q');\r\n            onQueryChange(query);\r\n        } else {\r\n            history.replace('./');\r\n        }\r\n        onSearchFood(searchQuery, cartItems);\r\n    }, [cartItems, history, location.search, onQueryChange, onSearchFood, searchQuery]);\r\n\r\n    let searchResult;\r\n    if (foods.length > 0) searchResult = <Foods foods={foods} toggleToCart={onToggleToCart} />;\r\n    if (loading) searchResult = <Foods foods={new Array(10).fill({})} />;\r\n    if (error) searchResult = <p style={{ textAlign: 'center' }}>Foods not found!</p>;\r\n\r\n    return (\r\n        <>\r\n            <SearchBar center queryChange={onQueryChange} />\r\n            {searchResult}\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    searchQuery: state.search.query,\r\n    foods: state.search.foods,\r\n    cartItems: state.cart.cartItems,\r\n    loading: state.search.loader,\r\n    error: state.search.error,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    onQueryChange: (value) => dispatch(actions.queryChange(value)),\r\n    onSearchFood: (query, cartItems) => dispatch(actions.searchFood(query, cartItems)),\r\n    onToggleToCart: (isAdded, item) => dispatch(actions.toggleToCart(isAdded, item)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);\r\n"],"sourceRoot":""}