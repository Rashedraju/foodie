{"version":3,"sources":["containers/Search/Search.js"],"names":["connect","state","searchQuery","search","query","foods","cartItems","cart","loading","loader","error","dispatch","onQueryChange","value","actions","onSearchFood","onToggleToCart","isAdded","item","props","searchResult","location","history","useEffect","replace","urlParams","URLSearchParams","has","searchQueryParams","get","length","toggleToCart","style","textAlign","Array","fill","center"],"mappings":"kGAAA,6DA0EeA,uBAdS,SAACC,GAAD,MAAY,CAChCC,YAAaD,EAAME,OAAOC,MAC1BC,MAAOJ,EAAME,OAAOE,MACpBC,UAAWL,EAAMM,KAAKD,UACtBE,QAASP,EAAME,OAAOM,OACtBC,MAAOT,EAAME,OAAOO,UAGG,SAACC,GAAD,MAAe,CACtCC,cAAe,SAACC,GAAD,OAAWF,EAASG,IAAoBD,KACvDE,aAAc,SAACX,EAAOE,GAAR,OAAsBK,EAASG,IAAmBV,EAAOE,KACvEU,eAAgB,SAACC,EAASC,GAAV,OAAmBP,EAASG,IAAqBG,EAASC,QAG/DlB,EApEA,SAACmB,GAAW,IAyCnBC,EAvCAlB,EAUAiB,EAVAjB,YACAmB,EASAF,EATAE,SACAC,EAQAH,EARAG,QACAV,EAOAO,EAPAP,cACAG,EAMAI,EANAJ,aACAT,EAKAa,EALAb,UACAE,EAIAW,EAJAX,QACAH,EAGAc,EAHAd,MACAK,EAEAS,EAFAT,MACAM,EACAG,EADAH,eAmCJ,OAhCAO,qBAAU,WAEc,KAAhBrB,GACAoB,EAAQE,QAAQ,MAGpB,IAAMC,EAAY,IAAIC,gBAAgBL,EAASlB,QAC/C,GAAIsB,EAAUE,IAAI,KAAM,CACpB,IAAMC,EAAoBH,EAAUI,IAAI,KAEd,KAAtBD,GACC1B,IAAgB0B,GAAsC,IAAjBvB,EAAMyB,SAE5ClB,EAAcgB,GACdb,EAAaa,EAAmBtB,OAGzC,CACCA,EACAD,EAAMyB,OACNR,EACAD,EAASlB,OACTS,EACAG,EACAb,IAIAG,EAAMyB,OAAS,IAAGV,EAAe,kBAAC,IAAD,CAAOf,MAAOA,EAAO0B,aAAcf,KACpEN,IAAOU,EAAe,uBAAGY,MAAO,CAAEC,UAAW,WAAvB,qBACtBzB,IAASY,EAAe,kBAAC,IAAD,CAAOf,MAAO,IAAI6B,MAAM,IAAIC,KAAK,OAGzD,oCACI,kBAAC,IAAD,CAAWC,QAAM,IAChBhB","file":"static/js/7.435cf5ec.chunk.js","sourcesContent":["import Foods from 'components/Foods/Foods';\r\nimport SearchBar from 'components/UI/SearchBar/SearchBar';\r\nimport React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from 'store/actions';\r\n\r\nconst Search = (props) => {\r\n    const {\r\n        searchQuery,\r\n        location,\r\n        history,\r\n        onQueryChange,\r\n        onSearchFood,\r\n        cartItems,\r\n        loading,\r\n        foods,\r\n        error,\r\n        onToggleToCart,\r\n    } = props;\r\n\r\n    useEffect(() => {\r\n        // redirect if no search query\r\n        if (searchQuery === '') {\r\n            history.replace('./');\r\n        }\r\n\r\n        const urlParams = new URLSearchParams(location.search);\r\n        if (urlParams.has('q')) {\r\n            const searchQueryParams = urlParams.get('q');\r\n            if (\r\n                searchQueryParams !== '' &&\r\n                (searchQuery !== searchQueryParams || foods.length === 0)\r\n            ) {\r\n                onQueryChange(searchQueryParams);\r\n                onSearchFood(searchQueryParams, cartItems);\r\n            }\r\n        }\r\n    }, [\r\n        cartItems,\r\n        foods.length,\r\n        history,\r\n        location.search,\r\n        onQueryChange,\r\n        onSearchFood,\r\n        searchQuery,\r\n    ]);\r\n\r\n    let searchResult;\r\n    if (foods.length > 0) searchResult = <Foods foods={foods} toggleToCart={onToggleToCart} />;\r\n    if (error) searchResult = <p style={{ textAlign: 'center' }}>Foods not found!</p>;\r\n    if (loading) searchResult = <Foods foods={new Array(10).fill({})} />;\r\n\r\n    return (\r\n        <>\r\n            <SearchBar center />\r\n            {searchResult}\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    searchQuery: state.search.query,\r\n    foods: state.search.foods,\r\n    cartItems: state.cart.cartItems,\r\n    loading: state.search.loader,\r\n    error: state.search.error,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    onQueryChange: (value) => dispatch(actions.queryChange(value)),\r\n    onSearchFood: (query, cartItems) => dispatch(actions.searchFood(query, cartItems)),\r\n    onToggleToCart: (isAdded, item) => dispatch(actions.toggleToCart(isAdded, item)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);\r\n"],"sourceRoot":""}